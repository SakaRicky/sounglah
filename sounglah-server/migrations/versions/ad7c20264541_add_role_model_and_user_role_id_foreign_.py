"""Add Role model and user role_id foreign key

Revision ID: ad7c20264541
Revises: e979871205f9
Create Date: 2025-07-13 12:39:39.650038

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'ad7c20264541'
down_revision = 'e979871205f9'
branch_labels = None
depends_on = None


def upgrade():
    # 1. Create roles table
    op.create_table('roles',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=64), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    # 2. Add role_id as nullable
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('role_id', sa.Integer(), nullable=True))
        batch_op.drop_index(batch_op.f('ix_users_role'))
        batch_op.create_index(batch_op.f('ix_users_role_id'), ['role_id'], unique=False)
        batch_op.create_foreign_key(None, 'roles', ['role_id'], ['id'])

    # 3. Insert default roles and assign to users
    # Use connection to insert roles and update users
    conn = op.get_bind()
    # Insert default roles
    conn.execute(sa.text("""
        INSERT INTO roles (name, description) VALUES
        ('admin', 'Administrator'),
        ('editor', 'Editor'),
        ('reviewer', 'Reviewer'),
        ('viewer', 'Viewer')
        ON CONFLICT (name) DO NOTHING;
    """))
    # Get the id of the 'editor' role
    result = conn.execute(sa.text("SELECT id FROM roles WHERE name='editor'"))
    editor_role_id = result.scalar()
    # Set all users to 'editor' by default
    conn.execute(sa.text("UPDATE users SET role_id = :role_id"), {"role_id": editor_role_id})

    # 4. Drop old role column
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('role')
    # 5. Alter role_id to be non-nullable
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('role_id', nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('role', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_index(batch_op.f('ix_users_role_id'))
        batch_op.create_index(batch_op.f('ix_users_role'), ['role'], unique=False)
        batch_op.drop_column('role_id')

    op.drop_table('roles')
    # ### end Alembic commands ###
